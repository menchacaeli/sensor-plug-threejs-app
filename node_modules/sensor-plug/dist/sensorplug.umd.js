(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["sensorplug"] = factory();
	else
		root["sensorplug"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by elimenchaca on 11/6/17.
 */
var Device = function IIFE() {
    var detectAcceleration = function detectAcceleration() {
        if (!('ondevicemotion' in window)) {
            return "sensorplug: Device Acceleration is not supported";
        } else {
            return "sensorplug: Device Acceleration is supported!";
        }
    };

    var detectOrientation = function detectOrientation() {
        if (!('ondeviceorientation' in window)) {
            return "sensorplug: Device Orientation is not supported";
        } else {
            return "sensorplug: Device Orientation is supported!";
        }
    };

    var detectGeolocation = function detectGeolocation() {
        if (!("geolocation" in navigator)) {
            return "sensorplug: Device Geolocation is not supported.";
        } else {
            return "sensorplug: Device Geolocation is supported!";
        }
    };

    var handleOrientation = function handleOrientation() {
        window.addEventListener('deviceorientation', function (eventData) {
            // gamma is the left-to-right tilt in degrees, where right is positive
            var gamma = eventData.gamma;
            // beta is the front-to-back tilt in degrees, where front is positive
            var beta = eventData.beta;
            // alpha is the compass direction the device is facing in degrees
            var alpha = eventData.alpha;

            var oriObj = { "gamma": gamma, "beta": beta, "alpha": alpha };
            socket.emit('orientation', oriObj);
        }, false);
    };

    var handleGeolocation = function handleGeolocation() {
        var positionOptions = {
            enableHighAccuracy: true,
            timeout: 10 * 1000, // 10 seconds
            maximumAge: 30 * 1000 // 30 seconds
        };

        function success(position) {
            var latitude = position.coords.latitude;
            var longitude = position.coords.longitude;

            var geoObj = { "latitude": latitude, "longitude": longitude };
            socket.emit('geolocation', geoObj);
        }

        function error() {
            console.log("error: Check sensorplug documentation");
        }

        navigator.geolocation.getCurrentPosition(success, error, positionOptions);
    };

    var handleAcceleration = function handleAcceleration() {
        if (window.DeviceMotionEvent) {
            window.addEventListener('devicemotion', function (motion) {
                // Acceleration
                var accelerationX = motion.acceleration.x;
                var accelerationY = motion.acceleration.y;
                var accelerationZ = motion.acceleration.z;

                var accObj = { "accelerationX": accelerationX, "accelerationY": accelerationY, "accelerationZ": accelerationZ };
                socket.emit('acceleration', accObj);
            }, false);
        } else {
            console.log("error: Check sensorplug documentation");
        }
    };

    var render = function render() {
        console.log(detectGeolocation());
        console.log(detectOrientation());
        console.log(detectAcceleration());
    };

    render();

    return {
        handleOrientation: handleOrientation,
        handleGeolocation: handleGeolocation,
        handleAcceleration: handleAcceleration
    };
}();

/***/ })
/******/ ]);
});
//# sourceMappingURL=sensorplug.umd.js.map